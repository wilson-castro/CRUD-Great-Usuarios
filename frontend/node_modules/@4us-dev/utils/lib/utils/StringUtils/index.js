"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var isBlank_1 = __importDefault(require("./isBlank"));
var isNotBlank_1 = __importDefault(require("./isNotBlank"));
var isEmpty_1 = __importDefault(require("./isEmpty"));
var isNotEmpty_1 = __importDefault(require("./isNotEmpty"));
var hideEmail_1 = __importDefault(require("./hideEmail"));
var removeNonNumeric_1 = __importDefault(require("./removeNonNumeric"));
var isInteger_1 = __importDefault(require("./isInteger"));
var isDouble_1 = __importDefault(require("./isDouble"));
/**
 * @since v0.0.1
 * @author Clairton luz <clairton.c.l@gmail.com>
 */
var StringUtils = /** @class */ (function () {
    function StringUtils() {
        /**
         * @description
         * Checks if a string is `null`, `undefined`, `empty` or `whitespace`
         *
         * @since v0.0.1
         * @author Clairton luz <clairton.c.l@gmail.com>
         *
         * @example
         * new StringUtils().isBlank(null) // true
         * @example
         * new StringUtils().isBlank(undefined) // true
         * @example
         * new StringUtils().isBlank('') // true
         * @example
         * new StringUtils().isBlank('   ') // true
         * @example
         * new StringUtils().isBlank('a') // false
         * @example
         * new StringUtils().isBlank('   a   ') // false
         */
        this.isBlank = isBlank_1.default;
        /**
         * @description
         * Checks if a string is not `null`, `undefined`, `empty` or `whitespace`
         *
         * @since v0.0.1
         * @author Clairton luz <clairton.c.l@gmail.com>
         *
         * @example
         * new StringUtils().isNotBlank(null) // false
         * @example
         * new StringUtils().isNotBlank(undefined) // false
         * @example
         * new StringUtils().isNotBlank('') // false
         * @example
         * new StringUtils().isNotBlank('   ') // false
         * @example
         * new StringUtils().isNotBlank('a') // true
         * @example
         * new StringUtils().isNotBlank('   a   ') // true
         */
        this.isNotBlank = isNotBlank_1.default;
        /**
         * @description
         * Checks if a string is `null`, `undefined` or `empty`
         *
         * @since v0.0.1
         * @author Clairton luz <clairton.c.l@gmail.com>
         *
         * @example
         * isEmpty(null) // true
         * @example
         * isEmpty(undefined) // true
         * @example
         * isEmpty('') // true
         * @example
         * isEmpty('   ') // false
         * @example
         * isEmpty('a') // false
         * @example
         * isEmpty('   a   ') // false
         */
        this.isEmpty = isEmpty_1.default;
        /**
         * @description
         * Checks if a string is not `null`, `undefined` or `empty`
         *
         * @since v0.0.1
         * @author Clairton luz <clairton.c.l@gmail.com>
         *
         * @example
         * isNotEmpty(null) // false
         * @example
         * isNotEmpty(undefined) // false
         * @example
         * isNotEmpty('') // false
         * @example
         * isNotEmpty('   ') // true
         * @example
         * isNotEmpty('a') // true
         * @example
         * isNotEmpty('   a   ') // true
         */
        this.isNotEmpty = isNotEmpty_1.default;
        /**
         * Hide part of the email.
         *
         * You could hide the start and/or the end of email.
         *
         * @param email - The email to be hided
         * @param config - Setting how the email should be hided
         * @returns email hided
         *
         * @since v0.0.5
         * @author Clairton luz <clairton.c.l@gmail.com>
         *
         * @example
         * hideEmail(`fulano@gmail.com`) // `f...@gmail.com`
         * @example
         * hideEmail(`fulano@gmail.com`, {
         *  hideStart: true, // default true
         *  hideEnd: true, // default false
         * }) // `f...@gma...`
         * @example
         * hideEmail(`fulano.com`) // undefined
         * @example
         * hideEmail(``) // undefined
         * @example
         * hideEmail(``) // undefined
         * @example
         * hideEmail(null) // undefined
         */
        this.hideEmail = hideEmail_1.default;
        /**
         * Removes all non-numeric caracteres from string.
         *
         * @param value - String to be processed
         * @returns `string` without any non-numeric caracteres
         *
         * @since v0.0.5
         * @author Clairton luz <clairton.c.l@gmail.com>
         *
         * @example
         * new StringUtils().removeNonNumeric('a1b2c3') // '123'
         */
        this.removeNonNumeric = removeNonNumeric_1.default;
        /**
         * Returns true if the value contains only numeric values
         *
         * @param value - String to be processed
         * @returns `boolean`
         *
         * @since v0.0.5
         * @author Clairton luz <clairton.c.l@gmail.com>
         *
         * @example
         * new StringUtils().isInteger('123') // true
         *
         * @example
         * new StringUtils().isInteger('12.3') // false
         *
         * @example
         * new StringUtils().isInteger('12,3') // false
         *
         * @example
         * new StringUtils().isInteger('a1b2c3') // false
         *
         * @example
         * new StringUtils().isInteger(' 123 ') // false
         */
        this.isInteger = isInteger_1.default;
        /**
         * Returns true if the value into string is a double
         *
         * @param value - String to be processed
         * @returns `boolean`
         *
         * @since v0.0.5
         * @author Clairton luz <clairton.c.l@gmail.com>
         *
         * @example
         * new StringUtils().isDouble('123') // true
         *
         * @example
         * new StringUtils().isDouble('12.3') // true
         *
         * @example
         * new StringUtils().isDouble('12,3') // false
         *
         * @example
         * new StringUtils().isDouble('a1b2c3') // false
         *
         * @example
         * new StringUtils().isDouble(' 123 ') // false
         */
        this.isDouble = isDouble_1.default;
    }
    return StringUtils;
}());
exports.default = StringUtils;
